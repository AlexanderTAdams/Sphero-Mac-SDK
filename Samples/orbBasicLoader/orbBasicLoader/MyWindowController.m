//
//  MyWindowController.m
//  KeyDrive
//
//  Created by Michael DePhillips on 10/18/12.
//  Copyright (c) 2012 Orbotix Inc. All rights reserved.
//

#import "MyWindowController.h"
#import <RobotKit/RobotKit.h>

@implementation MyWindowController

- (id)initWithPath:(NSString *)newPath
{
    /*Register for application lifecycle notifications so we known when to connect and disconnect from the robot*/
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(appDidBecomeActive:) name:NSApplicationDidBecomeActiveNotification object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(appWillResignActive:) name:NSApplicationWillResignActiveNotification object:nil];

    orbBasicProgram = nil;
    return [super initWithWindowNibName:@"Window"];
}

-(void)appDidBecomeActive:(NSNotification*)notification {
}

-(void)appWillResignActive:(NSNotification*)notification {
    
    // Stop observing responses and asynchronous data from Sphero.
    [[RKDeviceMessenger sharedMessenger] removeDataStreamingObserver:self];
    [[RKDeviceMessenger sharedMessenger] removeResponseObserver:self];
    
    // Stop communication with Sphero.
    [[RKRobotProvider sharedRobotProvider] closeRobotConnection];
}

-(void)robotWentOnline {
    // Set observer methods to handle messages from Sphero.
    [[RKDeviceMessenger sharedMessenger] addResponseObserver:self selector:@selector(handleResponse:)];
    [[RKDeviceMessenger sharedMessenger] addDataStreamingObserver:self selector:@selector(handleAsyncData:)];
}

- (void)dealloc
{   
	[super dealloc];
}

-(IBAction)loadPressed:(id)sender {
    if( orbBasicProgram == nil ) return;
    // Send the program to Sphero. This will erase the previous loaded program.
    [orbBasicProgram load];
}
-(IBAction)abortPressed:(id)sender {
    // Aborts the current program.
    [orbBasicProgram abort];
}
-(IBAction)executePressed:(id)sender {
    if( orbBasicProgram == nil ) return;
    // Execute the program. This will load the program if it is not already loaded.
    [messageView setStringValue:@"Executing ...\n"];
    [orbBasicProgram execute];
}
-(IBAction)erasePressed:(id)sender {
    if( orbBasicProgram == nil ) return;
    // Erases the current program.
    [orbBasicProgram erase];
}

#pragma mark Message Handlers

- (void)handleResponse:(RKDeviceResponse *)response
{
    // Check Responses
    if ([response isKindOfClass:[RKOrbBasicAppendFragmentResponse class]]) {
        // Check the load program responses - post message for each fragment sent
        if (response.code == RKResponseCodeErrorParameter) {
            [messageView setStringValue:[[messageView stringValue] stringByAppendingFormat:@"Syntax error.\n"]];
        } else if (response.code == RKResponseCodeErrorExecute) {
            [messageView setStringValue:[[messageView stringValue] stringByAppendingFormat:@"Memory full! Program not loaded.\n"]];
        }
        else if( response.code == RKResponseCodeOK ) {
            [messageView setStringValue:[[messageView stringValue] stringByAppendingFormat:@"Loaded Program Successfully.\n"]];
        }
    }
    else if ([response isKindOfClass:[RKOrbBasicEraseStorageResponse class]]) {
        // Response for Erasing orbBasic Program storage
        if( response.code == RKResponseCodeOK ) {
            [messageView setStringValue:[[messageView stringValue] stringByAppendingFormat:@"Erased Program Successfully.\n"]];
        }
        else {
            [messageView setStringValue:[[messageView stringValue] stringByAppendingFormat:@"Error Erasing Program.\n"]];
        }
    }
}

- (void)handleAsyncData:(RKDeviceAsyncData *)data
{
    if ([data isKindOfClass:[RKOrbBasicPrintMessageData class]]) {
        // Show print message that are generated by the program to the user.
        RKOrbBasicPrintMessageData *printMessage = (RKOrbBasicPrintMessageData *)data;
        [messageView setStringValue:[[messageView stringValue] stringByAppendingFormat:@"orbBasic Print: %@", printMessage.message]];
    } else if ([data isKindOfClass:[RKOrbBasicErrorASCIIData class]]) {
        // Show code error messages to the user.
        RKOrbBasicErrorASCIIData *errorMessage = (RKOrbBasicErrorASCIIData *)data;
        [messageView setStringValue:[[messageView stringValue] stringByAppendingFormat:@"orbBasic Error: %@", errorMessage.error]];
    } else if ([data isKindOfClass:[RKOrbBasicErrorBinaryData class]]) {
        [messageView setStringValue:[[messageView stringValue] stringByAppendingFormat:@"orbBasic Binary Error.\n"]];
    }
}

-(IBAction)openPressed:(id)sender {
    // Open a mac system file dialog
    NSOpenPanel *panel;
    // Only allow our orbbas file types
    NSArray* fileTypes = [[NSArray alloc] initWithObjects:@"orbbas", @"ORBBAS", nil];
    panel = [NSOpenPanel openPanel];
    [panel setFloatingPanel:YES];
    [panel setCanChooseDirectories:NO];
    [panel setCanChooseFiles:YES];
    [panel setAllowsMultipleSelection:NO];
    [panel setAllowedFileTypes:fileTypes];
    // Run the dialog
    long i = [panel runModal];
    if(i == NSOKButton){
        // Grab the file name and base filepath and create an orbBasic Program object
        NSString* fullFilePath = panel.URL.filePathURL.path;
        NSArray *parts = [fullFilePath componentsSeparatedByString:@"/"];
        NSString *filename = [parts lastObject];
        NSString* filePath = [fullFilePath substringToIndex:([fullFilePath length]-[filename length])];
        // This class object handles loading, erasing, and executing the orbBasic program
        orbBasicProgram = [[RKOrbBasicProgram alloc] initWithFilePath:filename
                                                        directoryPath:filePath
                                                                error:nil];
    }
}


@end
